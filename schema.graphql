type Attribute {
  attributename: String
  createdon: String
  pk_attributeid: ID
  seats: [Seat]
  updatedon: String
}

type Booking {
  bookingnumber: String
  createdon: String
  date: String
  isafternoon: Boolean
  ismorning: Boolean
  pk_bookingid: ID
  seat: Seat
  updatedon: String
  user: User
}

type BookingLog {
  bookingnumber: String
  createdon: String
  date: String
  isafternoon: Boolean
  ismorning: Boolean
  pk_bookinglogid: ID
  seat: Seat
  updatedon: String

  """wasdeleted: Boolean"""
  user: User
}

type Building {
  buildingname: String
  createdon: String
  floors: [Floor]
  location: Location
  pk_buildingid: ID
  updatedon: String
}

type Floor {
  building: Building
  createdon: String
  floorname: String
  pk_floorid: ID
  seats: [Seat]
  updatedon: String
}

type Location {
  buildings: [Building]
  createdon: String
  locationname: String
  pk_locationid: ID
  updatedon: String
  users: [User]
}

type Mutation {
  bookSeat(date: String, isAfternoon: Boolean, isMorning: Boolean, seatId: String, userId: String): Booking
  changeUsername(id: String, name: String): User
  deleteBooking(bookingId: ID): Boolean
  setdefaultLocation(locationid: ID, userid: ID): User
}

type Query {
  allBookings: [Booking]
  getAfternoonBookingLogs: [BookingLog]
  getAllBookingLogs: [BookingLog]
  getAllDeletedBookingLogs: [BookingLog]
  getAllExpiredBookingLogs: [BookingLog]
  getAllLocations: [Location]
  getAllSeats: [Seat]
  getAllUsers: [User]
  getBookingById(id: ID): Booking
  getBookingsByDate(date: String): [Booking]
  getFullDayBookingLogs: [BookingLog]
  getMorningBookingLogs: [BookingLog]
  getRolesOfUser(id: ID): [Role]
  getSeatsOnFloor(floorid: ID): [Seat]
  getUserById(id: ID): User
  hasDefaultLocation(id: ID): Boolean
}

type Role {
  createdon: String
  pk_roleid: ID
  rolename: String
  updatedon: String
  users: [User]
}

type Seat {
  attributes: [Attribute]
  bookinglogs: [BookingLog]
  bookings: [Booking]
  createdon: String
  floor: Floor
  pk_seatid: ID
  seatnum: String
  updatedon: String
  x: Float
  y: Float
}

type User {
  bookinglogs: [BookingLog]
  bookings: [Booking]
  createdon: String
  location: Location
  pk_userid: ID
  roles: [Role]
  updatedon: String
  username: String
}
